#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/sem.h>

#define NUMPROCS 4

int count1(ct)
FILE *ct;
{
    int count;

    if ((ct = fopen("counter", "r")) == NULL) exit(1);
    fscanf(ct, "%d\n", &count);
    count++;
    fclose(ct);

    if ((ct = fopen("counter", "w")) == NULL) exit(1);
    fprintf(ct, "%d\n", count);
    fclose(ct);

    return count;
}

/* セマフォ操作関数 */
void mySemop(int sid, int num, int op) {

    struct sembuf sb;

    sb.sem_num = num;
    sb.sem_op  = op;
    sb.sem_flg = 0;

    if (semop(sid, &sb, 1) == -1) {
        perror("mySemop ");
        exit(1);
    }
}

main()
{
    int  i, count, pid, sid, status;
    FILE *ct;

    key_t key;
    struct sembuf sb;

    setbuf(stdout, NULL); /* set stdout to be unbufferd */
    
    /* セマフォの作成 */
    key = ftok("semaphore", 1);
    if ((sid = semget(key, 1, 0666 | IPC_CREAT)) == -1) {
        perror("semget error.");
        exit(1);
    }
    semctl(sid, 0, SETVAL, 1); /* セマフォの値を 1 に */

    /* counterに0を書き込む */
    count = 0;
    if ((ct = fopen("counter", "w")) == NULL) exit(1);
    fprintf(ct, "%d\n", count);
    fclose(ct);

    /* プロセスの生成と実行 */
    for (i = 0; i < NUMPROCS; i++) {
        if ((pid = fork()) == -1) {
            perror("fork failed.");
            exit(1);
        }
        if (pid == 0) {          /* 子プロセスの処理 */

            /* WAIT */
            mySemop(sid, 0, -1);

            /* Critical Section */
            count = count1(ct);

            /* SIGNAL */
            mySemop(sid, 0, 1);

            printf("count = %d\n", count);
            exit(0);
        }
    }

    for (i = 0; i < NUMPROCS; i++) { /* 親プロセスの処理 */
        wait(&status);
    }

    /* セマフォを削除 */
    if (semctl(sid, 0, IPC_RMID, 0) == -1){
        perror("sem clear");
        exit(1);
    }
}
