;*******************************************************************
;* This stationery serves as the framework for a user application. *
;* For a more comprehensive program that demonstrates the more     *
;* advanced functionality of this processor, please see the        *
;* demonstration applications, located in the examples             *
;* subdirectory of the "Freescale CodeWarrior for HC08" program    *
;* directory.                                                      *
;*******************************************************************

; Include derivative-specific definitions
            INCLUDE 'derivative.inc'

; export symbols
            XDEF _Startup, main
            ; we export both '_Startup' and 'main' as symbols. Either can
            ; be referenced in the linker .prm file or from C/C++ later on

            XREF __SEG_END_SSTACK   ; symbol defined by the linker for the end of the stack


; variable/data section
MY_ZEROPAGE: SECTION  SHORT         ; Insert here your data definition
MODE:       DS 1
COUNT:      DS 1
INDEX:      DS 1
HIST:       DS 10

; code section
MyCode:     SECTION
main:
_Startup:
            LDHX   #__SEG_END_SSTACK ; initialize the stack pointer
            TXS
            CLI                     ; enable interrupts

            LDA #00000000b       ;PTAを入力に
            STA PTADD
            LDA #11111111b      ;PTBを出力に
            STA PTBDD

            LDA #0
            STA COUNT
            STA INDEX
            STA MODE

            LDHX #0h

waitC:                                  ;コンデンサの充電を待つ
            LDA PTAD
            AND #00000001b
            BEQ waitC

            LDA #11111111b      ; LED消灯
            STA PTBD


mainLoop:

waitSw1On:
            feed_watchdog
            LDA PTAD
            AND #00000001b
            BEQ waitSw1Off
            BRA waitSw1On

waitSw1Off:
            feed_watchdog
            LDA PTAD
            AND #00000001b
            BEQ waitSw1Off

            LDA MODE
            CMP #1
            BEQ output
            BRA input

input:
           LDA PTAD
           LSRA
           AND #00000111b      ; ディップスイッチの値を読み取る
           STA INDEX

           LDX INDEX
           LDA SEG, X            ; 対応する数を表示
           STA PTBD


           LDX COUNT             ; LED状態を保存
           STA HIST, X

           LDA INDEX
           CMP #0                   ; 入力が０なら出力モードに
           BEQ modeChangeOut


           LDA COUNT               ; COUNT++
           INCA
           CMP #10
           BEQ modeChangeOut   ; データが１０なら出力モードに
           STA COUNT

           BRA mainLoop

modeChangeOut:
           LDA #0
           STA COUNT
           LDA #1                   ; MODE = 1
           STA MODE
           BRA mainLoop

output:
           LDA COUNT
           CMP #10
           BEQ modeChangeInput
           LDX COUNT
           LDA HIST, X
           CMP SEG
           BEQ modeChangeInput

           STA PTBD

           LDA COUNT
           INCA
           STA COUNT

           BRA mainLoop

modeChangeInput:
           LDA #0
           STA COUNT
           STA MODE
           LDA #11111111b
           STA PTBD
           BRA mainLoop

           feed_watchdog
           BRA    mainLoop

SEG:    DC.B 01000000b, 11111001b, 00100100b, 00110000b, 00011001b, 00000010b, 01111000b
