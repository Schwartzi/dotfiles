#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/sem.h>

#define NUMPROCS 4

int count1(ct)
FILE *ct;
{
        int count;

        if ((ct=fopen("counter", "r"))==NULL) exit(1);
        fscanf(ct, "%d\n", &count);
        count++;
        fclose(ct);

        if ((ct=fopen("counter", "w"))==NULL) exit(1);
        fprintf(ct, "%d\n", count);
        fclose(ct);

        return count;
}

/* セマフォ操作（ロック/アンロック） */
void MySemop(int p_semid, int p_op)
{
        struct sembuf    sops[1];

        sops[0].sem_num = 0;                 /* セマフォ番号 */
        sops[0].sem_op  = p_op;              /* セマフォ操作 */
        sops[0].sem_flg = 0;                 /* 操作フラグ */

        if (semop(p_semid, sops, 1) == -1) {
                perror("MySemop ");
                exit(EXIT_FAILURE);
        }
}


main()
{
        int i, count, pid, sid,  status;
        FILE *ct;

        key_t key;
        struct sembuf sb;

        /* セマフォの作成 */
        key = ftok("semaphore", 1);

        if ((sid=semget(key, 1, 0666 | IPC_CREAT)) == -1) {
                perror("semget error.");
                exit(1);
        }

        semctl(sid, 0, SETVAL, 1); /* 獲得した集合の最初のセマフォの値を 1 に */


        setbuf(stdout, NULL); /* set stdout to be unbufferd */
        count = 0;
        if ((ct=fopen("counter", "w"))==NULL) exit(1);
        fprintf(ct, "%d\n", count);
        fclose(ct);

        for (i=0; i<NUMPROCS; i++) {
                if ((pid=fork()) == -1) {
                        perror("fork failed.");

                        exit(1);
                }
                if (pid == 0) { /* Child process */

                        /* WAIT */
                        MySemop(sid, -1);

                        /* Critical Section */
                        count = count1(ct);

                        /* SIGNAL */
                        MySemop(sid, 1);

                        printf("count = %d\n", count);
                        exit(0);


                }
        }

        for (i=0; i<NUMPROCS; i++) {
                wait(&status);
        }

        /* セマフォを削除 */
        if (semctl(sid, 0, IPC_RMID, 0) == -1){
                perror("sem clear");
                exit(EXIT_FAILURE);
        }
}
