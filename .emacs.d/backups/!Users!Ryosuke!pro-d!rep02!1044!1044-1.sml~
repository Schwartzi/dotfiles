use "/Users/Ryosuke/pro-d/sml_kadai/lib.sml";

fun compute s mapL =
    let

        fun findValue s (nil : (string * int) list) = raise NotDefined
          | findValue s (h::t) =
            if #1 h = s then
                #2 h
            else
                findValue s t;
        
        fun EXP nil = raise SyntaxError
          | EXP (h::t) =
            if      isInt h then
                (toInt h, t)
            else if isAlp h then
                (findValue h mapL, t)
            else if h = "(" then
                if isAlp(hd t) then
                    FUNC (h::t)
                else
                    COMP (h::t)
            else raise SyntaxError

        and COMP nil = raise SyntaxError
          | COMP (h::t) =
            if h = "(" then
                let
                    val hc = hd t
                    val tc = tl t
                in
                    if (hc = "+") orelse (hc = "-") orelse
                       (hc = "*") orelse (hc = "/") then
                        let
                            val (v1,t1) = EXP tc
                            fun calc (xv, xt) =
                                let
                                    val (yv, yt) = EXP xt
                                in
                                    if      xt = nil    then raise SyntaxError
                                    else if hd yt = ")" then
                                        if      hc = "+" then
                                            (xv  +  yv, tl yt)
                                        else if hc = "-" then
                                            (xv  -  yv, tl yt)
                                        else if hc = "*" then
                                            (xv  *  yv, tl yt)
                                        else if hc = "/" then
                                            (xv div yv, tl yt)
                                        else raise SyntaxError
                                    else if isInt(hd yt) then
                                        if      hc = "+" then
                                            calc(xv  +  yv, yt)
                                        else if hc = "-" then
                                            calc(xv  -  yv, yt)
                                        else if hc = "*" then
                                            calc(xv  *  yv, yt)
                                        else if hc = "/" then
                                            calc(xv div yv, yt)
                                        else raise SyntaxError
                                    else raise SyntaxError
                                end
                        in
                            calc(v1, t1)
                        end
                    else raise SyntaxError
                end
            else raise SyntaxError

        and FUNC nil = raise SyntaxError
          | FUNC (h::t) =
            if h = "(" then
                let
                    val hc = hd t
                    val tc = tl t
                in
                    if (hc = "fact") orelse (hc = "fibo") then
                        let
                            val (v1, t1) = EXP tc
                        in
                            if      t1 =  nil   then raise SyntaxError
                            else if hd t1 = ")" then
                                if      hc = "fact" then
                                    (fact(v1), tl t1)
                                else if hc = "fibo" then
                                    (fibo(v1), tl t1)
                                else raise SyntaxError
                            else raise SyntaxError
                        end         
                    else raise SyntaxError            
                end
            else raise SyntaxError

    in
        let
            val (result,rest) = EXP (separate s)
        in
            if rest = nil then result
            else raise SyntaxError
        end
    end;




compute "( +  6 4 5 )" [("a", 1)];
