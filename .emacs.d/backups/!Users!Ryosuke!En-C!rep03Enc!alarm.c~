#include <stdio.h>
#include <signal.h>
#include <stdlib.h>

#define BUFSIZE 256
#define TIMEOUT 10

void myalarm(int sec) {

    static int oldPid;
    int i, pid, status;

    if ((pid = fork()) == -1) {
        perror("fork failed.");
        exit(1);
    }

    if (pid == 0) { /* Child process */

        sleep(sec);

        /* 親プロセスにSIGALRMを送信 */
        if (kill(getppid(), SIGALRM) == -1) {
            perror("kill SIGALRM failed.");
            exit(1);
        }
        exit(0);

    } else {        /* Parent process */

        /* 既存のアラームを削除 */
        if (oldPid != 0) {
            if (kill(oldPid, SIGTERM) == -1) {
                perror("kill SIGTERM failed.");
                exit(1);
            }
        }
        /* アラームのPIDを保存 */
        oldPid = pid;

        /* 子プロセスの終了を無視 */
        if(signal(SIGCHLD, SIG_IGN) == SIG_ERR) {
            perror("signal SIGCHLD failed.");
            exit(1);
        }
    }
}

void timeout(int sock) {

    printf("This program is timeout.\n");
    close(sock);
    exit(0);
}

int main() {

    char buf[BUFSIZE];

    if(signal(SIGALRM,timeout) == SIG_ERR) {
        perror("signal failed.");
        exit(1);
    }

    myalarm(TIMEOUT);

    while (fgets(buf, BUFSIZE, stdin) != NULL) {
        printf("echo: %s",buf);
        myalarm(TIMEOUT);
    }
}
