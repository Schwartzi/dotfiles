f<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<!-- Created by htmlize-1.39 in css mode. -->
<html>
  <head>
    <title>alu.vhd</title>
    <style type="text/css">
    <!--
      body {
        color: #000000;
        background-color: #ffffff;
      }
      .comment {
        /* font-lock-comment-face */
        color: #b22222;
      }
      .comment-delimiter {
        /* font-lock-comment-delimiter-face */
        color: #b22222;
      }
      .function-name {
        /* font-lock-function-name-face */
        color: #0000ff;
      }
      .keyword {
        /* font-lock-keyword-face */
        color: #7f007f;
      }
      .string {
        /* font-lock-string-face */
        color: #8b2252;
      }
      .type {
        /* font-lock-type-face */
        color: #228b22;
      }
      .variable-name {
        /* font-lock-variable-name-face */
        color: #a0522d;
      }
      .vhdl-font-lock-function {
        /* vhdl-font-lock-function-face */
        color: #008b8b;
      }

      a {
        color: inherit;
        background-color: inherit;
        font: inherit;
        text-decoration: inherit;
      }
      a:hover {
        text-decoration: underline;
      }
    -->
    </style>
  </head>
  <body>
    <pre>
<span class="keyword">library</span> <span class="vhdl-font-lock-function">ieee</span>;
<span class="keyword">use</span> <span class="vhdl-font-lock-function">ieee</span>.<span class="vhdl-font-lock-function">std_logic_1164</span>.<span class="keyword">all</span>;
<span class="keyword">use</span> <span class="vhdl-font-lock-function">ieee</span>.<span class="vhdl-font-lock-function">std_logic_unsigned</span>.<span class="keyword">all</span>;
<span class="keyword">use</span> <span class="vhdl-font-lock-function">work</span>.<span class="function-name">alu_pack</span>.<span class="keyword">all</span>;

<span class="keyword">entity</span> <span class="function-name">alu</span> <span class="keyword">is</span>
    <span class="keyword">generic</span> (
        <span class="variable-name">N_BIT</span>:  <span class="type">natural</span> := 8 );
    <span class="keyword">port</span> (
        <span class="variable-name">sel_in</span>: <span class="keyword">in</span>  <span class="type">std_logic_vector</span>( 2       <span class="keyword">downto</span> 0 );
        <span class="variable-name">a_in</span>:   <span class="keyword">in</span>  <span class="type">std_logic_vector</span>( N_BIT-1 <span class="keyword">downto</span> 0 );
        <span class="variable-name">b_in</span>:   <span class="keyword">in</span>  <span class="type">std_logic_vector</span>( N_BIT-1 <span class="keyword">downto</span> 0 );
        <span class="variable-name">c_in</span>:   <span class="keyword">in</span>  <span class="type">std_logic</span>;
        <span class="variable-name">d_out</span>:  <span class="keyword">out</span> <span class="type">std_logic_vector</span>( N_BIT-1 <span class="keyword">downto</span> 0 );
        <span class="variable-name">c_out</span>:  <span class="keyword">out</span> <span class="type">std_logic</span>;
        <span class="variable-name">z_out</span>:  <span class="keyword">out</span> <span class="type">std_logic</span>;
        <span class="variable-name">s_out</span>:  <span class="keyword">out</span> <span class="type">std_logic</span>;
        <span class="variable-name">v_out</span>:  <span class="keyword">out</span> <span class="type">std_logic</span>;
        <span class="variable-name">p_out</span>:  <span class="keyword">out</span> <span class="type">std_logic</span> );

<span class="keyword">end</span> <span class="keyword">entity</span> <span class="function-name">alu</span>;

<span class="comment-delimiter">----------------------------------------------------------------------</span><span class="comment">
</span><span class="comment-delimiter">--  </span><span class="comment">Behavior Model
</span><span class="comment-delimiter">----------------------------------------------------------------------</span><span class="comment">
</span>
<span class="keyword">architecture</span> <span class="function-name">behavior</span> <span class="keyword">of</span> <span class="function-name">alu</span> <span class="keyword">is</span>
<span class="keyword">begin</span>
    <span class="keyword">process</span>( sel_in, a_in, b_in, c_in )
        <span class="keyword">constant</span> <span class="variable-name">MINUS_ONE</span>:  <span class="type">std_logic_vector</span>( N_BIT-1 <span class="keyword">downto</span> 0 ) :=
                        ( <span class="keyword">others</span> =&gt; <span class="string">'1'</span> );
        <span class="keyword">variable</span> <span class="variable-name">a_tmp</span>: <span class="type">std_logic_vector</span>( N_BIT <span class="keyword">downto</span> 0 );
        <span class="keyword">variable</span> <span class="variable-name">b_tmp</span>: <span class="type">std_logic_vector</span>( N_BIT <span class="keyword">downto</span> 0 );
        <span class="keyword">variable</span> <span class="variable-name">not_b</span>: <span class="type">std_logic_vector</span>( N_BIT <span class="keyword">downto</span> 0 );
        <span class="keyword">variable</span> <span class="variable-name">d_tmp</span>: <span class="type">std_logic_vector</span>( N_BIT <span class="keyword">downto</span> 0 );
        <span class="keyword">variable</span> <span class="variable-name">z_tmp</span>: <span class="type">std_logic</span>;
        <span class="keyword">variable</span> <span class="variable-name">v_tmp</span>: <span class="type">std_logic_vector</span>( N_BIT-1 <span class="keyword">downto</span> 0 );
        <span class="keyword">variable</span> <span class="variable-name">p_tmp</span>: <span class="type">std_logic</span>;
    <span class="keyword">begin</span>
    
        a_tmp := <span class="string">'0'</span> &amp; a_in;
        b_tmp := <span class="string">'0'</span> &amp; b_in;
        not_b := <span class="string">'0'</span> &amp; <span class="keyword">not</span> b_in;
        
        <span class="keyword">case</span> sel_in <span class="keyword">is</span>
        
            <span class="keyword">when</span> <span class="string">"000"</span>  =&gt;  d_tmp := a_tmp + c_in;
                            v_tmp := ( <span class="string">'0'</span> &amp; a_in( N_BIT-2 <span class="keyword">downto</span> 0 ) ) +
                                     c_in;
                            v_out &lt;= d_tmp( N_BIT-1 ) <span class="keyword">xor</span> v_tmp( N_BIT-1 );
                            
            <span class="keyword">when</span> <span class="string">"001"</span>  =&gt;  d_tmp := a_tmp + b_tmp + c_in;
                            v_tmp := ( <span class="string">'0'</span> &amp; a_in( N_BIT-2 <span class="keyword">downto</span> 0 ) ) +
                                     ( <span class="string">'0'</span> &amp; b_in( N_BIT-2 <span class="keyword">downto</span> 0 ) ) + 
                                     c_in;
                            v_out &lt;= d_tmp( N_BIT-1 ) <span class="keyword">xor</span> v_tmp( N_BIT-1 );

                            
            <span class="keyword">when</span> <span class="string">"010"</span>  =&gt;  d_tmp := a_tmp + not_b + c_in;
                            v_tmp := ( <span class="string">'0'</span> &amp; a_in( N_BIT-2 <span class="keyword">downto</span> 0 ) ) +
                                     ( <span class="string">'0'</span> &amp; <span class="keyword">not</span> b_in( N_BIT-2 <span class="keyword">downto</span> 0 ) ) +
                                     c_in;
                            v_out &lt;= d_tmp( N_BIT-1 ) <span class="keyword">xor</span> v_tmp( N_BIT-1 );


            <span class="keyword">when</span> <span class="string">"011"</span>  =&gt;  d_tmp := a_tmp + MINUS_ONE + c_in;
                            v_tmp := ( <span class="string">'0'</span> &amp; a_in( N_BIT-2 <span class="keyword">downto</span> 0 ) ) +
                                     ( <span class="string">'0'</span> &amp; MINUS_ONE( N_BIT-2 <span class="keyword">downto</span> 0 ) ) +
                                     c_in;
                            v_out &lt;= d_tmp( N_BIT-1 ) <span class="keyword">xor</span> v_tmp( N_BIT-1 );

                            
            <span class="keyword">when</span> <span class="string">"100"</span>  =&gt;  d_tmp := a_tmp <span class="keyword">or</span>  b_tmp;
                            d_tmp( N_BIT ) := <span class="string">'0'</span>;
                            v_out &lt;= <span class="string">'0'</span>;
                            
            <span class="keyword">when</span> <span class="string">"101"</span>  =&gt;  d_tmp := a_tmp <span class="keyword">xor</span> b_tmp;
                            d_tmp( N_BIT ) := <span class="string">'0'</span>;
                            v_out &lt;= <span class="string">'0'</span>;

            <span class="keyword">when</span> <span class="string">"110"</span>  =&gt;  d_tmp := a_tmp <span class="keyword">and</span> b_tmp;
                            d_tmp( N_BIT ) := <span class="string">'0'</span>;
                            v_out &lt;= <span class="string">'0'</span>;

            <span class="keyword">when</span> <span class="string">"111"</span>  =&gt;  d_tmp := <span class="keyword">not</span> a_tmp;
                            d_tmp( N_BIT ) := <span class="string">'0'</span>;
                            v_out &lt;= <span class="string">'0'</span>;

            <span class="keyword">when</span> <span class="keyword">others</span> =&gt;  d_tmp := ( <span class="keyword">others</span> =&gt; <span class="string">'X'</span> );
                            v_out &lt;= <span class="string">'X'</span>;
            
        <span class="keyword">end</span> <span class="keyword">case</span>;
        
        d_out &lt;= d_tmp( N_BIT-1 <span class="keyword">downto</span> 0 );

        c_out &lt;= d_tmp( N_BIT );
        
        z_out &lt;= vnor( d_tmp( N_BIT-1 <span class="keyword">downto</span> 0 ) );

        s_out &lt;= d_tmp( N_BIT-1 );
        
        p_out &lt;= vxor( d_tmp( N_BIT-1 <span class="keyword">downto</span> 0 ) );

    <span class="keyword">end</span> <span class="keyword">process</span>;
    
<span class="keyword">end</span> <span class="keyword">architecture</span> <span class="function-name">behavior</span>;


<span class="comment-delimiter">----------------------------------------------------------------------</span><span class="comment">
</span><span class="comment-delimiter">--  </span><span class="comment">Begin Structure Model &#20316;&#25104;&#37096;&#20998;&#22987;&#12414;&#12426;
</span><span class="comment-delimiter">----------------------------------------------------------------------</span><span class="comment">
</span>
<span class="keyword">architecture</span> <span class="function-name">structure</span> <span class="keyword">of</span> <span class="function-name">alu</span> <span class="keyword">is</span>
  <span class="keyword">component</span> <span class="function-name">full_adder</span> <span class="keyword">is</span>
    <span class="keyword">port</span> (
      <span class="variable-name">a_in</span>  : <span class="keyword">in</span>  <span class="type">std_logic</span>;
      <span class="variable-name">b_in</span>  : <span class="keyword">in</span>  <span class="type">std_logic</span>;
      <span class="variable-name">c_in</span>  : <span class="keyword">in</span>  <span class="type">std_logic</span>;
      <span class="variable-name">c_out</span> : <span class="keyword">out</span> <span class="type">std_logic</span>;
      <span class="variable-name">s_out</span> : <span class="keyword">out</span> <span class="type">std_logic</span>);
  <span class="keyword">end</span> <span class="keyword">component</span> <span class="function-name">full_adder</span>;

  <span class="keyword">signal</span> <span class="variable-name">or_op</span>   : <span class="type">std_logic</span>;
  <span class="keyword">signal</span> <span class="variable-name">and_op</span>  : <span class="type">std_logic</span>;
  <span class="keyword">signal</span> <span class="variable-name">sel_or</span>  : <span class="type">std_logic_vector</span>(N_BIT-1 <span class="keyword">downto</span> 0);
  <span class="keyword">signal</span> <span class="variable-name">sel_and</span> : <span class="type">std_logic_vector</span>(N_BIT-1 <span class="keyword">downto</span> 0);
  
  <span class="keyword">signal</span> <span class="variable-name">sel_p2</span>  : <span class="type">std_logic_vector</span>(N_BIT-1 <span class="keyword">downto</span> 0);
  <span class="keyword">signal</span> <span class="variable-name">sel_p1</span>  : <span class="type">std_logic_vector</span>(N_BIT-1 <span class="keyword">downto</span> 0);
  <span class="keyword">signal</span> <span class="variable-name">sel_p0</span>  : <span class="type">std_logic_vector</span>(N_BIT-1 <span class="keyword">downto</span> 0);

  <span class="keyword">signal</span> <span class="variable-name">a_tmp</span>   : <span class="type">std_logic_vector</span>(N_BIT-1 <span class="keyword">downto</span> 0);
  <span class="keyword">signal</span> <span class="variable-name">b_tmp</span>   : <span class="type">std_logic_vector</span>(N_BIT-1 <span class="keyword">downto</span> 0);
  <span class="keyword">signal</span> <span class="variable-name">ci_tmp</span>  : <span class="type">std_logic_vector</span>(N_BIT-1 <span class="keyword">downto</span> 0);
  <span class="keyword">signal</span> <span class="variable-name">co_tmp</span>  : <span class="type">std_logic_vector</span>(N_BIT-1 <span class="keyword">downto</span> 0);

  <span class="keyword">signal</span> <span class="variable-name">d_tmp</span>   : <span class="type">std_logic_vector</span>(N_BIT-1 <span class="keyword">downto</span> 0);
  
<span class="keyword">begin</span>  <span class="comment-delimiter">-- </span><span class="comment">structure
</span>
  <span class="comment-delimiter">--</span><span class="comment">"100" for OR operation
</span>  or_op   &lt;= sel_in(2) <span class="keyword">and</span> (<span class="keyword">not</span> sel_in(1)) <span class="keyword">and</span> (<span class="keyword">not</span> sel_in(0));

  <span class="comment-delimiter">--</span><span class="comment">"110" for AND operation
</span>  and_op  &lt;= sel_in(2) <span class="keyword">and</span> sel_in(1) <span class="keyword">and</span> (<span class="keyword">not</span> sel_in(0));

  sel_or  &lt;= (<span class="keyword">others</span> =&gt; or_op);
  sel_and &lt;= (<span class="keyword">others</span> =&gt; and_op);

  sel_p2  &lt;= (<span class="keyword">others</span> =&gt; sel_in(2));
  sel_p1  &lt;= (<span class="keyword">others</span> =&gt; sel_in(1));
  sel_p0  &lt;= (<span class="keyword">others</span> =&gt; sel_in(0));

  a_tmp   &lt;= a_in <span class="keyword">or</span> (sel_or <span class="keyword">and</span> b_in) <span class="keyword">or</span> (sel_and <span class="keyword">and</span> (<span class="keyword">not</span> b_in));
  b_tmp   &lt;= (sel_p0 <span class="keyword">and</span> b_in) <span class="keyword">or</span> (sel_p1 <span class="keyword">and</span> (<span class="keyword">not</span> b_in));
  ci_tmp  &lt;= (<span class="keyword">not</span> sel_p2) <span class="keyword">and</span> (co_tmp(N_BIT-2 <span class="keyword">downto</span> 0) &amp; c_in);
  
  
  <span class="function-name">FADD_ARRAY</span>: <span class="keyword">for</span> <span class="variable-name">i</span> <span class="keyword">in</span> 0 <span class="keyword">to</span> N_BIT-1 <span class="keyword">generate</span>
    <span class="function-name">FADD_X</span> : <span class="function-name">full_adder</span> <span class="keyword">port</span> <span class="keyword">map</span> (
      <span class="variable-name">a_in</span>  =&gt; a_tmp(i),
      <span class="variable-name">b_in</span>  =&gt; b_tmp(i),
      <span class="variable-name">c_in</span>  =&gt; ci_tmp(i),
      <span class="variable-name">s_out</span> =&gt; d_tmp(i),
      <span class="variable-name">c_out</span> =&gt; co_tmp(i));
  <span class="keyword">end</span> <span class="keyword">generate</span>;

  d_out  &lt;= d_tmp(N_BIT-1 <span class="keyword">downto</span> 0);

  c_out  &lt;= (<span class="keyword">not</span> sel_in(2)) <span class="keyword">and</span> co_tmp(N_BIT-1);

  z_out  &lt;= vnor(d_tmp(N_BIT-1 <span class="keyword">downto</span> 0));

  s_out  &lt;= d_tmp(N_BIT-1);

  v_out  &lt;= (<span class="keyword">not</span> sel_in(2)) <span class="keyword">and</span> ((co_tmp(N_BIT-1) <span class="keyword">xor</span> (co_tmp(N_BIT-2))));

  p_out  &lt;= vxor(d_tmp(N_BIT-1 <span class="keyword">downto</span> 0));

<span class="keyword">end</span> <span class="keyword">architecture</span> <span class="function-name">structure</span>;

<span class="comment-delimiter">----------------------------------------------------------------------</span><span class="comment">
</span><span class="comment-delimiter">--  </span><span class="comment">End Structure Model &#20316;&#25104;&#37096;&#20998;&#32066;&#12431;&#12426;
</span><span class="comment-delimiter">----------------------------------------------------------------------</span><span class="comment">
</span></pre>
  </body>
</html>
