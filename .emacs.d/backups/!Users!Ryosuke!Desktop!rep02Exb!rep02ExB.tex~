\documentclass[titlepage]{jsarticle}

\title{情報科学実験B 第1回レポート課題} % 題目
\author{谷村亮介}                      % 提出者名
\date{平成25年4月26日(金)}                  % 提出日

%\課題名{開発環境の習得}     % 課題名
%\担当教官{瀬尾・石尾}                       % 担当教官名
%\所属{ソフトウェア科学コース}             % 自分の所属するコース名などを指定する.
%\学年{3年}                             % 学年
%\学籍番号{09B11044}                    % 学籍番号
                                      % 班やグループ名.
                                      % 必要なければ指定しなくてもよい.
%\email{u549298j@ecs.osaka-u.ac.jp}    % 電子メールのアドレス

\usepackage{ascmac}
\usepackage{here}
\usepackage{txfonts}
\usepackage{listings, jlisting}
\usepackage{color}
\usepackage[dvips]{graphicx}


\definecolor{OliveGreen}{cmyk}{0.64,0,0.95,0.40}
\definecolor{colFunc}{rgb}{1,0.07,0.54}
\definecolor{CadetBlue}{cmyk}{0.62,0.57,0.23,0}
\definecolor{Brown}{cmyk}{0,0.81,1,0.60}
\definecolor{colID}{rgb}{0.63,0.44,0}

\lstdefinelanguage{ASM}{
morekeywords={LDHX, TXS, CLI, LDA, STA, AND, BEQ, BRA,
              INCA, CMP, feed_watchdog},%
morecomment=[l]{;},%
morestring=[b]",%"
}

\renewcommand{\lstlistingname}{リスト}
\lstset{language=ASM,
  backgroundcolor={\color[gray]{.95}},%
  basicstyle=\sffamily\scriptsize,
  keywordstyle={\bfseries \color{OliveGreen}},
  frame=tRBl,
  framesep=5pt,
  showstringspaces=false,
  numbers=left,
  stepnumber=1,
  numberstyle=\sffamily\tiny,
  tabsize=2
}

\begin{document}
\maketitle

\section{課題3}

\subsection{課題内容}

Project ボード上のプッシュスイッチ 1 つとディップスイッチのうち 3 ビットを用いて、
以下の動作を行うシステムを作成する。

\begin{itemize}
\item 電源を投入した直後は、 セグメント LED を消灯した状態とする。
\item プッシュスイッチを 1 度押して離すと、
  離した時点でのディップスイッチの 3 ビットを 0~7 として解 釈し、
  対応する 10 進数の数字を 7 セグメント LED に表示する。
  スイッチを離すまでは LED に値は表 示されない。
\item さらにプッシュスイッチを押して離すと、
  同様に離した時点でのディップスイッチの値を 7 セグメント LED に反映する。
  スイッチを離すまでは LED の値は変更されない。

\end{itemize}

\subsection{システムの振る舞い}
電源を投入した直後は、
7セグメントLEDに何も表示せずに、
プッシュスイッチが押されるのを待機する。
プッシュスイッチが押されたら、
今度はプッシュスイッチが離されるのを待機する。
この2つの待機により、
プッシュスイッチが押して離されるまで、
7セグメントLEDには何も表示されない、という振る舞いを満たすことができる。

プッシュスイッチが離されたら、
ディップスイッチの状態をポートAから読み取り、
対応する7セグメントLEDの状態をポートBから出力する。
出力後は、再度プッシュスイッチが押されるのを待機する。
これにより、プッシュスイッチほ押して離すたびに、
同じ振る舞いを繰り返すことができる。


\subsection{ハードウェアの配線と入出力}

接続関係を示した図を、図\ref{fig:kairo3}に示す。

配線を再現する際の手順を以下に述べる。
\begin{enumerate}
\item ブレッドボードに、図で示した回路を作成する。
\item 74HC14の他のNOTゲートは、5Vに接続しておく。
\item DemoボードはProjectボードのJ7に差し込む。
\item PTA、PTBのラベルの部分は、ProjectボードのJ5またはJ6の、
      対応する番号の端子に接続する。
\item PB1、SW1\verb+_+x、 VCC、GNDは、Projectボード上に同じ名前が書かれた端子があるので、
      そこに接続する。
\end{enumerate}

ハードウェアとプログラムの入出力との関係を表\ref{tab:1}に示す。

\begin{figure}[htbp]
  \begin{center}
    \includegraphics[clip,width=10.0cm]{kairo03.eps}
    \caption{課題3の回路図}
    \label{fig:kairo3}
  \end{center}
\end{figure}

\begin{table}
  \centering
  \begin{tabular}{|r || r | r | l |}
\hline
    入出力 & プログラム & ハードウェア & 役割 \\
\hline
    入力    & PTA0 & PB1  & プッシュスイッチ入力 \\
           & PTA1 & SW1\verb+_+1 & ディップスイッチ1ビット目 \\
           & PTA2 & SW1\verb+_+2 & ディップスイッチ2ビット目 \\
           & PTA3 & SW1\verb+_+3 & ディップスイッチ3ビット目 \\
\hline
    出力    & PTB0 & 7seg\verb+_+A & 7セグLEDのA端子 \\
           & PTB1 & 7seg\verb+_+B & 7セグLEDのB端子  \\
           & PTB2 & 7seg\verb+_+C & 7セグLEDのC端子  \\
           & PTB3 & 7seg\verb+_+D & 7セグLEDのD端子  \\
           & PTB4 & 7seg\verb+_+E & 7セグLEDのE端子  \\
           & PTB5 & 7seg\verb+_+F & 7セグLEDのF端子  \\
           & PTB6 & 7seg\verb+_+G & 7セグLEDのG端子  \\
\hline
  \end{tabular}
  \caption{ハードウェアとプログラムの入出力との関係}
  \label{tab:1}
\end{table}

\subsection{プログラム実行の流れ}

プログラム実行の流れを表したC言語風の擬似コードを以下に示す。

\begin{verbatim}

int INDEX;
int SEG[7] = {01000000b, 11111001b, 00100100b, 00110000b,
              00011001b, 00000010b, 01111000b};

PTADD = #00000000b  // ポートAを入力に
PTBDD = #11111111b  // ポートBを出力に

INDEX = 0; // 変数の初期化
HX    = 0; // アドレス指定レジスタの初期化

while (PTAD != #00000000b); // コンデンサに電荷が貯まるのを待機

PTBD = #11111111b;          // LED消灯

while(1) {                             // 無限ループ
    while (PTAD != #00000001b);        // スイッチONを待機
    while (PTAD != #00000000b);        // スイッチOFFを待機
    INDEX = (PTAD >> 1) & #00000111b;  // ディップスイッチの値を読み取る
    PTBD  = SEG[INDEX];                 // 7segLEDに出力
}

\end{verbatim}

まずは、各ポートの入出力設定や、
変数の初期化などを行う。
チャタリング防止回路のコンデンサに電荷が貯まるのを待機し、
スイッチがOFF状態になったら、LEDを消灯し、無限ループに入る。

スイッチがON→OFFになるまで待機して、
スイッチがOFFになったらディップスイッチの状態をポートAから読み取る。
ディップスイッチの値は、PTADの2〜4ビット目に入っているので、
1ビット右シフトした後、下3ビットをマスクして取り出す。
例えば、PTADの値が\verb+00011010+のとき、
以下の様な処理が行われる。

\begin{verbatim}
00011010 >> 1       = 00001101
00001101 & 00000111 = 00000101 -> 5
\end{verbatim}

値を読み取ったら、その値に対応する7セグメントLEDの点滅状態を、
ポートBに出力する。
出力が終了したら、スイッチがONになるのを待機するところまで戻り、
処理を繰り返す。


\subsection{データ領域の使用方法}

このプログラムで使用したデータラベルの役割を表\ref{tab:2}に示す。

\begin{table}
  \centering
  \begin{tabular}{|l || l |}
\hline
    ラベル & 意味・役割 \\
\hline
    INDEX: DS 1 & SEGのアドレスを指定するための変数。\\
\hline
    SEG: DC.B   & 7セグメントLEDの各値の点滅状態を保存する配列。\\
\hline
  \end{tabular}
  \caption{ラベルの意味と役割}
  \label{tab:2}
\end{table}



\section{課題4}

\subsection{課題内容}

課題3と同じ入出力デバイスを用いて、
数値の列を入力として受け取り、
データの終端まで到達したら記憶した数値の列を出力していくシステムを作成する。
以下に詳しい動作を示す。

\begin{itemize}
\item 初期状態:電源投入後、7 セグメント LED を消灯し、入力状態に移行する。
\item 入力状態:プッシュスイッチを押して離すと、
  7セグメントLEDに数値を表示し、また、その数値を記憶する。
  入力された数値かが1~7 で、かつ、記憶した数値の数が 10 個に満たなけれはば、
  入力状態を継 続する。
  記憶した数値の数が 10 個に到達したか、
  入力された数値が0 であれば、出力状態に移行する。
\item 出力状態:プッシュスイッチを押して離すごとに、
  7 セググメント LED に最初に記憶した数値から順に 数値の表示を実行する。
  データが終端に到達した状態でプッシュスイッチが押されて 離されたとき、
  7 セグメント LED を消灯し入力状態に戻る。

\end{itemize}

\subsection{システムの振る舞い}
電源を投入した直後は、
7セグメントLEDに何も表示せずに、
プッシュスイッチが押されるのを待機する。
プッシュスイッチが押されたら、
今度はプッシュスイッチが離されるのを待機する。
この2つの待機により、
プッシュスイッチが押して離されるまで、
7セグメントLEDには何も表示されない、という振る舞いを満たすことができる。

プッシュスイッチが離されたら、
ディップスイッチの状態をポートAから読み取り、その値を記録して、
値に対応する7セグメントLEDの点滅状態をポートBから出力する。


\subsection{ハードウェアの配線と入出力}

ハードウェアの配線などは、
課題3から変化がないため、図表は省略する。

\subsection{プログラム実行の流れ}

プログラム実行の流れを表したC言語風の擬似コードを以下に示す。

\begin{verbatim}

int MODE, COUNT, INDEX;
int HIST[10];
int SEG[7] = {01000000b, 11111001b, 00100100b, 00110000b,
              00011001b, 00000010b, 01111000b};

PTADD = #00000000b  // ポートAを入力に
PTBDD = #11111111b  // ポートBを出力に

MODE = COUNT = INDEX = 0; // 変数の初期化
HX   = 0;                 // アドレス指定レジスタの初期化

while (PTAD != #00000000b); // コンデンサに電荷が貯まるのを待機

PTBD = #11111111b;          // LED消灯

while(1) {                             // 無限ループ
    while (PTAD != #00000001b);        // スイッチONを待機
    while (PTAD != #00000000b);        // スイッチOFFを待機

    if        (MODE == 0) {            //  入力状態の時
        INDEX = (PTAD >> 1) & #00000111b;   // ディップスイッチの値を読み取る
        PTBD  = SEG[INDEX];                 // 7segLEDに出力
        HIST[COUNT] = SEG[INDEX];           // LED状態を保存
        COUNT++;
        if (INDEX == 0) || (COUNT == 10) {  // 0が入力orデータが10個
            COUNT = 0;
            MODE  = 1;                      // 出力状態に変更
        }
    } else if (MODE == 1) {            // 出力状態の時

        if ((HIST[COUNT] == SEG[0])||(COUNT == 10)) { // データをすべて出力した時
            COUNT = 0;
            MODE  = 0;                 //入力状態に変更
            PTBD  = #11111111b;
        } else {
            PTBD = HIST[COUNT];        // 保存データを出力
            COUNT++;
        }
    }
}

\end{verbatim}



\subsection{データ領域の使用方法}

このプログラムで使用したデータラベルの役割を表\ref{tab:3}に示す。

\begin{table}
  \centering
  \begin{tabular}{|l || l |}
\hline
    ラベル & 意味・役割 \\
\hline
    MODE: DS 1 & 入出力状態を指定するための変数。(0…入力状態、1…出力状態)\\
    COUNT: DS 1 & HISTのアドレスを指定するための変数。\\
    INDEX: DS 1 & SEGのアドレスを指定するための変数。\\
    HIST: DS 10 & 入力した値を最大10個保存する配列。\\
\hline
    SEG: DC.B   & 7セグメントLEDの各値の点滅状態を保存する配列。\\

\hline
  \end{tabular}
  \caption{ラベルの意味と役割}
  \label{tab:3}
\end{table}



\end{document}