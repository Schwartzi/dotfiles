#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/sem.h>

#define NUMPROCS 4

/* セマフォ操作関数 */
void mySemop(int sid, int num, int op) {

    struct sembuf sb;

    sb.sem_num = num;
    sb.sem_op  = op;
    sb.sem_flg = 0;

    if (semop(sid, &sb, 1) == -1) {
        perror("mySemop ");
        exit(1);
    }
}


main() {

    int i, pid, sid, status;
    key_t key;
    struct sembuf sb;

    setbuf(stdout, NULL);      /* set stdout to be unbufferd */

    /* セマフォの作成 */
    key = ftok("semaphore", 1);

    if ((sid=semget(key, 1, 0666 | IPC_CREAT)) == -1) {
        perror("semget error.");
        exit(1);
    }

    semctl(sid, 0, SETVAL, 0); /* 最初のセマフォの値を 0 に */

    for (i=0; i<NUMPROCS; i++) {

        if ((pid=fork()) == -1) {
            perror("fork failed.");
            exit(1);
        }
        if (pid == 0) { /* Child process */

            sleep(i);

            /* SIGNAL */
            mySemop(sid, 0, 1);

            /* バリア同期 */
            if (semctl(sid, 0, GETVAL) == NUMPROCS) { /* 最後に到達したなら */
                /* WAITしてセマフォの値を 0 に */
                mySemop(sid, 0, -NUMPROCS);
            } else {
                /* セマフォが 0 になるまで待機 */
                mySemop(sid, 0, 0);
            };

            printf("Process %d executed.\n", i);

            exit(0);
        }
    }

    /* Parent process */
    for (i=0; i<NUMPROCS; i++) {
        wait(&status);
    }

    /* セマフォを削除 */
    if (semctl(sid, 0, IPC_RMID, 0) == -1){
        perror("sem clear");
        exit(1);
    }
}
