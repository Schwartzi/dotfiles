#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define BUFSIZE 256

int main(int argc, char *argv[]) {

    char buf[BUFSIZE];
    int  fd_PtoC[2], fd_CtoP[2];
    int  pid, msglen, status;

    if (argc != 3) {
        printf("bad argument.\n");
        exit(1);
    }

    if ((pipe(fd_PtoC) == -1) || (pipe(fd_CtoP) == -1)){
        perror("pipe failed.");
        exit(1);
    }

    if ((pid=fork())== -1) {
        perror("fork failed.");
        exit(1);
    }

    if (pid == 0) { /* Child process */
        close(fd_PtoC[1]);
        close(fd_CtoP[0]);
        msglen = strlen(argv[1]) + 1;
        if (write(fd_CtoP[1], argv[1], msglen) == -1) {
            perror("pipe write. CtoP");
            exit(1);
        }

        if (read(fd_PtoC[0], buf, BUFSIZE) == -1) {
            perror("pipe read.  PtoC");
            exit(2);
        }
        printf("Message from Parent process: \t%s\n", buf);


        exit(0);
    } else { /* Parent process */
        close(fd_PtoC[0]);
        close(fd_CtoP[1]);
        msglen = strlen(argv[2]) + 1;
        if (write(fd_PtoC[1], argv[2], msglen) == -1) {
            perror("pipe write. PtoC");
            exit(1);
        }

        if (read(fd_CtoP[0], buf, BUFSIZE) == -1) {
            perror("pipe read.  CtoP");
            exit(2);
        }
        printf("Message from child process: \t%s\n", buf);

        wait(&status);
    }
}
