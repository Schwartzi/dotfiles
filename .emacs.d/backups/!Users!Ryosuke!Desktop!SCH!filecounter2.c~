#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/types.h>

#define NUMPROCS 2

#define TRUE 1
#define FALSE 0

int count1(ct)
FILE *ct;
{
    int count;

    if ((ct = fopen("counter", "r")) == NULL) exit(1);
    fscanf(ct, "%d\n", &count);
    count++;
    fclose(ct);

    if ((ct = fopen("counter", "w")) == NULL) exit(1);
    fprintf(ct, "%d\n", count);
    fclose(ct);

    return count;
}

main() {
    int  i, count, pid, sid, status;
    int  id;
    int  *sem, *turn, *wantp, *wantq;
    FILE *ct;


    if((id  = shmget(IPC_PRIVATE, 512, IPC_CREAT|0666)) == -1){
        perror("shmget");
        exit(-1);
    }

    if((sem = (int *)shmat(id, NULL, 0)) == (void *)-1){
        perror("shmat");
        exit(-1);
    }

    turn  = sem   + 1;
    wantp = turn  + 1;
    wantq = wantp + 1;

    *sem  = 1;
    *turn = 1;
    *wantp = FALSE;
    *wantq = FALSE;
    printf("%d, %d, %d, %d\n", *sem, *turn, *wantp, *wantq);

    setbuf(stdout, NULL); /* set stdout to be unbufferd */
    count = 0;
    if ((ct = fopen("counter", "w")) == NULL) exit(1);
    fprintf(ct, "%d\n", count);
    fclose(ct);

    /* プロセスの生成と実行 */
    for (i = 1; i <= 2; i++) {

        if ((pid = fork()) == -1) {
            perror("fork failed.");
            exit(1);
        }
        if (pid == 0) {          /* 子プロセスの処理 */

            if (i == 1) {

                // デッカー P ------------------
                *wantp = TRUE;
                while (*wantq == TRUE) {
                    if (*turn == 2) {
                        *wantp = FALSE;
                        while (*turn != 1);
                        *wantp = TRUE;
                    };
                };
                /* cs*/
                if (*sem == 1) {
                    *sem--;
                } else {
                    while(*sem != 1);
                };

                *turn = 2;
                *wantp = FALSE;
                //----------------------------

                /* Critical Section */
                count = count1(ct);

                /* SIGNAL */
                if(*sem == 0) *sem++;

                printf("%d count = %d\n", i, count);
                exit(0);

            } else if (i == 2) {

                // デッカー Q ------------------
                *wantq = TRUE;
                while (*wantp ==TRUE) {
                    if (*turn == 1) {
                        *wantq = FALSE;
                        while (*turn != 2);
                        *wantq = TRUE;
                    };
                };
                /* cs*/
                if (*sem == 1) {
                    *sem--;
                } else {
                    while(*sem != 1);
                };
                *turn = 1;
                *wantq = FALSE;
                //-----------------------------

                /* Critical Section */
                count = count1(ct);

                /* SIGNAL */
                if(*sem == 0) *sem++;

                printf("%d count = %d\n", i, count);
                exit(0);

            }
        }
    }

    for (i = 0; i < NUMPROCS; i++) { /* 親プロセスの処理 */
        wait(&status);
    }

    /* shmの破壊をする */
    if(shmctl(id, IPC_RMID, 0) == -1){
        perror("shmctl");
        exit(EXIT_FAILURE);
    }
}
