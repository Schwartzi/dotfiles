\documentclass{jsarticle}

\title{{\bf 情報科学実験B 第1回レポート課題}} % 題目
\author{谷村亮介}                      % 提出者名
\date{平成25年4月26日(金)}                  % 提出日

% \課題名{開発環境の習得}     % 課題名
% \担当教官{瀬尾・石尾}                       % 担当教官名
% \所属{ソフトウェア科学コース}             % 自分の所属するコース名などを指定する.
% \学年{3年}                             % 学年
% \学籍番号{09B11044}                    % 学籍番号
% 班やグループ名.
% 必要なければ指定しなくてもよい.
% \email{u549298j@ecs.osaka-u.ac.jp}    % 電子メールのアドレス

\usepackage{ascmac}
\usepackage{arydshln}
\usepackage{here}
\usepackage{txfonts}
\usepackage{listings, jlisting}
\usepackage{color}
\usepackage[dvips]{graphicx}


\definecolor{OliveGreen}{cmyk}{0.64,0,0.95,0.40}
\definecolor{colFunc}{rgb}{1,0.07,0.54}
\definecolor{CadetBlue}{cmyk}{0.62,0.57,0.23,0}
\definecolor{Brown}{cmyk}{0,0.81,1,0.60}
\definecolor{colID}{rgb}{0.63,0.44,0}


\renewcommand{\lstlistingname}{リスト}
\lstset{language=c,
  backgroundcolor={\color[gray]{.95}},%
  basicstyle=\sffamily\scriptsize,
  keywordstyle={\bfseries \color{OliveGreen}},
  commentstyle={\itshape \color{Brown}},
  stringstyle={\ttfamily \color{CadetBlue}},
  frame=tRBl,
  framesep=5pt,
  showstringspaces=false,
  numbers=left,
  stepnumber=1,
  numberstyle=\sffamily\tiny,
  tabsize=2
}

\begin{document}
\tableofcontents

\newpage
\section{課題3: ディップスイッチによる数値の入力}

\subsection{課題内容}

Projectボード上のプッシュスイッチ1つと、
ディップスイッチのうち3ビットを用いて、
以下の動作を行うシステムを作成する。

\begin{itemize}
\item 電源を投入した直後は、7セグメントLEDを消灯した状態とする。
\item プッシュスイッチを1度押して離すと、
  離した時点でのディップスイッチの3ビットを0$\sim$7として解釈し、
  対応する10進数の数字を7セグメントLEDに表示する。
 スイッチを離すまではLEDに値は表示されない。
\item さらにプッシュスイッチを押して離すと、
  同様に離した時点でのディップスイッチの値を7セグメントLEDに反映する。
  スイッチを離すまではLEDの値は変更されない。

\end{itemize}

\subsection{システムの振る舞い}
電源を投入した直後は、
7セグメントLEDに何も表示せずに、
プッシュスイッチが押されるのを待機する。
プッシュスイッチが押されたら、
今度はプッシュスイッチが離されるのを待機する。
この2つの待機により、
プッシュスイッチが押して離されるまで、
7セグメントLEDには何も表示されない、という振る舞いを満たすことができる。

プッシュスイッチが離されたら、
ディップスイッチの状態をポートAから読み取り、
対応する7セグメントLEDの状態をポートBから出力する。
出力後は、再度プッシュスイッチが押されるのを待機する。
これにより、プッシュスイッチを押して離すたびに、
同じ振る舞いを繰り返すことができる。


\subsection{ハードウェアの配線と入出力}

接続関係を示した図を、図\ref{fig:kairo3}に示す。

配線を再現する際の手順を以下に述べる。
\begin{enumerate}
\item ブレッドボードに、図で示した回路を作成する。
\item 74HC14の他のNOTゲートは、5Vに接続しておく。
\item DemoボードはProjectボードのJ7に差し込む。
\item PTA、PTBのラベルの部分は、ProjectボードのJ5またはJ6の、
  対応する番号の端子に接続する。
\item PB1、SW1\verb+_+x、VCC、GNDは、Projectボード上に同じ名前が書かれた端子があるので、
  そこに接続する。
\end{enumerate}

さらに、プログラムとハードウェアの入出力との関係を表\ref{tab:1}に示す。

\begin{figure}[htbp]
  \begin{center}
    \includegraphics[clip,width=12.0cm]{kairo03.eps}
    \caption{課題3の回路図}
    \label{fig:kairo3}
  \end{center}
\end{figure}

\begin{table}[htbp]
  \centering
  \begin{tabular}{r | l | l | l }
    \hline
    & プログラム & ハードウェア & 役割 \\
    \hline
    入力    & PTA0 & PB1  & プッシュスイッチの入力 \\
    & PTA1 & SW1\verb+_+1 & ディップスイッチ1ビット目 \\
    & PTA2 & SW1\verb+_+2 & ディップスイッチ2ビット目 \\
    & PTA3 & SW1\verb+_+3 & ディップスイッチ3ビット目 \\
    \hline
    出力    & PTB0 & 7seg\verb+_+A & 7セグLEDのA端子 \\
    & PTB1 & 7seg\verb+_+B & 7セグLEDのB端子  \\
    & PTB2 & 7seg\verb+_+C & 7セグLEDのC端子  \\
    & PTB3 & 7seg\verb+_+D & 7セグLEDのD端子  \\
    & PTB4 & 7seg\verb+_+E & 7セグLEDのE端子  \\
    & PTB5 & 7seg\verb+_+F & 7セグLEDのF端子  \\
    & PTB6 & 7seg\verb+_+G & 7セグLEDのG端子  \\
    \hline
  \end{tabular}
  \caption{プログラムとハードウェアの入出力との関係}
  \label{tab:1}
\end{table}

\newpage
\subsection{プログラム実行の流れ}

プログラム実行の流れを表したC言語風の擬似コードをリスト\ref{k33}に示す。

なお、文章中の()内の数字は、擬似コードの行番号に該当する。
以降の章でも同じである。

\begin{lstlisting}[caption=課題3の擬似コード,label=k33]
  int INDEX;
  int SEG[7] = {01000000b, 11111001b, 00100100b, 00110000b,
                00011001b, 00010010b, 00000010b, 01111000b};

  PTADD = #00000000b  // ポートAを入力に
  PTBDD = #11111111b  // ポートBを出力に

  INDEX = #0; // 変数の初期化
  HX    = #0; // アドレス指定レジスタの初期化

  while (PTAD != #00000000b); // コンデンサに電荷が貯まるのを待機

  PTBD = #11111111b;          // LED消灯

  while(1) {                           // 無限ループ
    while (PTAD != #00000001b);        // スイッチONを待機
    while (PTAD != #00000000b);        // スイッチOFFを待機
    INDEX = (PTAD >> 1) & #00000111b;  // ディップスイッチの値を読み取る
    PTBD  = SEG[INDEX];                // 7segLEDに出力
  }
\end{lstlisting}


まずは、各ポートの入出力設定や、
変数の初期化などを行う。(1-9)
チャタリング防止回路のコンデンサに電荷が貯まるのを待機し、(11)
スイッチがOFF状態になったら、LEDを消灯し、無限ループに入る。(13-15)

スイッチがON→OFFになるまで待機して、(16-17)
スイッチがOFFになったらディップスイッチの状態をポートAから読み取る。(18)
ディップスイッチの値は、PTADの2〜4ビット目に入っているので、
1ビット右シフトした後、下3ビットをマスクして取り出す。
例えば、PTADの値が\verb+00011010+のとき、
以下の様な処理が行われる。

\begin{screen}
\begin{verbatim}
00011010 >> 1       = 00001101
00001101 & 00000111 = 00000101 -> 5
\end{verbatim}
\end{screen}


値を読み取ったら、その値に対応する7セグメントLEDの点滅状態を、
ポートBに出力する。(19)
出力が終了したら、スイッチがONになるのを待機するところまで戻り、
処理を繰り返す。


\subsection{データ領域の使用方法}

このプログラムで使用したデータラベルの役割を表\ref{tab:2}に示す。

\begin{table}[htbp]
  \centering
  \begin{tabular}{l | l }
    \hline
    ラベル & 意味・役割 \\
    \hline \hline
    \verb+INDEX: DS 1+ & SEGのアドレスを指定するための変数。\\
    \hline
    \verb+waitC:+   & コンデンサの充電を待機するループ。\\
    \verb+mainLoop:+   & メインループ。\\
    \verb+waitSw1On:+   & プッシュスイッチがオンになるのを待機するループ。\\
    \verb+waitSw1On:+   & プッシュスイッチがオフになるのを待機するループ。\\
    \verb+Sw1Off:+   & プッシュスイッチがオフになった時の処理。\\
    \hline
    \verb+SEG:   DC.B+ & 7セグメントLEDの各値の点滅状態を保存する配列。\\
    \hline
  \end{tabular}
  \caption{ラベルの意味と役割(課題3)}
  \label{tab:2}
\end{table}

\newpage

\section{課題4: 数値列の入出力}

\subsection{課題内容}

課題3と同じ入出力デバイスを用いて、
数値の列を入力として受け取り、
データの終端まで到達したら記憶した数値の列を出力していくシステムを作成する。
以下に詳しい動作を示す。

\begin{itemize}
\item \textbf{初期状態}:電源投入後、7 セグメント LED を消灯し、入力状態に移行する。
\item \textbf{入力状態}:プッシュスイッチを押して離すと、
  7セグメントLEDに数値を表示し、また、その数値を記憶する。
  入力された数値が1$\sim$7 で、かつ、記憶した数値の数が 10 個に満たなけれはば、
  入力状態を継 続する。
  記憶した数値の数が 10 個に到達したか、
  入力された数値が0 であれば、出力状態に移行する。
\item \textbf{出力状態}:プッシュスイッチを押して離すごとに、
  7 セググメント LED に最初に記憶した数値から順に 数値の表示を実行する。
  データが終端に到達した状態でプッシュスイッチが押されて 離されたとき、
  7 セグメント LED を消灯し入力状態に戻る。

\end{itemize}

\subsection{システムの振る舞い}
\label{sis4}
電源を投入した直後は、
7セグメントLEDに何も表示せずに、
プッシュスイッチが押されるのを待機する。
プッシュスイッチが押されたら、
今度はプッシュスイッチが離されるのを待機する。
この2つの待機により、
プッシュスイッチが押して離されるまで、
7セグメントLEDには何も表示されない、という振る舞いを満たすことができる。

プッシュスイッチが離されたら、
ディップスイッチの状態をポートAから読み取り、その値を記録して、
値に対応する7セグメントLEDの点滅状態をポートBから出力する。
記録した数値の数が10個に達したか、入力された数値が0であれば、
出力状態に移行する。

出力状態の時にプッシュスイッチを押して離すと、
最初に記録した数値から順に、数値を表示する。
データが終端に達した時、すなわち0を読み出した時や表示した数が10個になった時は、
LEDを消灯して入力状態に戻る。

以上の動作を繰り返すことで、
要求された仕様を満たすことができる。

\subsection{ハードウェアの配線と入出力}

ハードウェアの配線などは、
課題3から変化がないため、図表は省略する。

\subsection{プログラム実行の流れ}

メインループ以降の、プログラム実行の流れを表したC言語風の擬似コードをリスト\ref{k4}に示す。
メインループ以前の初期設定については、課題3からほどんど変更はない。
また、擬似コード中で使用している変数などについては、次の章で詳しく説明する。


\begin{lstlisting}[caption=課題4の擬似コード(mainLoop以降),label=k4]
  // ---初期設定---

  while(1) {                           // 無限ループ
    while (PTAD != #00000001b);        // スイッチONを待機
    while (PTAD != #00000000b);        // スイッチOFFを待機

  //  入力状態の時
    if        (MODE == 0) {
      INDEX = (PTAD >> 1) & #00000111b;   // ディップスイッチの値を読み取る
      PTBD  = SEG[INDEX];                 // 7segLEDに出力
      HIST[COUNT] = SEG[INDEX];           // LED状態を保存
      COUNT++;
      if (INDEX == 0) || (COUNT == 10) {  // 0が入力orデータが10個
        COUNT = 0;
        MODE  = 1;                        // 出力状態に変更
      }
  // 出力状態の時
    } else if (MODE == 1) {
      if ((HIST[COUNT] == SEG[0])||(COUNT == 10)) { // データをすべて出力した時
        COUNT = 0;
        MODE  = 0;                 // 入力状態に変更
        PTBD  = #11111111b;        // LED消灯
      } else {
        PTBD = HIST[COUNT];        // 保存データを出力
        COUNT++;
      }
    }
  }
\end{lstlisting}

プッシュスイッチが押されて離されたら、
MODE変数の値に応じて、入力状態・出力状態の処理を実行する。(4-8)

入力状態の時には、
課題3と同様にしてディップスイッチの状態を読み取り、
7セグメントLEDに読み取った値を出力する。(9-10)
同時に、その出力内容をHIST[COUNT]に保存し、COUNTの値を1増やす。(11-12)
例えば、「245」の順番で数値が入力された場合は、HIST[0]に\verb+#00100100b+が、
HIST[1]に\verb+#00011001b+が、HIST[2]に\verb+#0001001b+が記録されていく。
0が入力された場合や、保存したデータが10個になった場合は、
COUNTの値を0に戻し、MODEを1にして、出力状態に移行する。(13-15)

出力状態の時は、HIST[COUNT]の値をポートBに出力し、COUNTの値を1増やす。(24-25)
これを繰り返すと、保存された値を次々に出力することができる。
HIST[COUNT]の値がSEG[0]と等しい場合や、COUNTの値が10になった時は、
データをすべて出力したことになるので、
LEDを消灯し、MODEの値を0にして、入力状態に移行する。(19-22)


\subsection{データ領域の使用方法}

このプログラムで使用したデータラベルの役割を表\ref{tab:33}に示す。

\begin{table}[htb]
  \centering
  \begin{tabular}{l | l }
    \hline
    ラベル & 意味・役割 \\
    \hline \hline
    \verb+MODE:  DS  1+ & 入出力状態を指定するための変数。(0…入力状態、1…出力状態)\\
    \verb+COUNT: DS  1+ & HISTのアドレスを指定するための変数。\\
    \verb+INDEX: DS  1+ & SEGのアドレスを指定するための変数。\\
    \verb+HIST:  DS 10+ & 入力した値を最大10個保存する配列。\\
    \hline
    \verb+waitC:+   & コンデンサの充電を待機するループ。\\
    \verb+mainLoop:+   & メインループ。\\
    \verb+waitSw1On:+   & プッシュスイッチがオンになるのを待機するループ。\\
    \verb+waitSw1On:+   & プッシュスイッチがオフになるのを待機するループ。\\
    \verb+input:+   & 入力状態の処理。 \\
    \verb+modeChangeOut:+   & 入力状態から出力状態に変更する処理。\\
    \verb+output:+   & 出力状態の処理。\\
    \verb+modeChangeInput:+ &  出力状態から入力状態に変更する処理。 \\
    \hline
    \verb+SEG: DC.B+   & 7セグメントLEDの各値の点滅状態を保存する配列。\\

    \hline
  \end{tabular}
  \caption{ラベルの意味と役割(課題4)}
  \label{tab:33}
\end{table}


\section{課題5: 実時間でのLED制御}
\subsection{課題内容}
プッシュスイッチが押されたら、7 セグメントLEDに学籍番号の下 4 桁の数字(今回は``1044'')を
1 秒ずつ順番に出力していくシステムを作成する。
以下に詳しい動作を示す。

\begin{itemize}
\item \textbf{初期状態}:電源投入後は、7 セグメント LED を消灯し、
  プッシュスイッチが押されるのを待機する。
\item \textbf{出力状態}:プッシュスイッチが1度押されて離されたら、動作を開始する。
  スイッチが離されてから1秒経過した 時点で 1 桁目の数値、
  次の 1 秒が経過した時点で 2 桁目の数値、
  さらに 1 秒が経過した時点で3 桁目 の数値、
  4 秒経過した時点で 4 桁目の数値を 7 セグメント LED に表示する。
  次の 1 秒が経過したら、7 セグメント LED を消灯し、初期状態に戻る。
  数値を表示している間は、スイッチを押しても何も起こらない。
\end{itemize}

\subsection{システムの振る舞い}
電源投入後は、7 セグメント LED を消灯し、プッシュスイッチが押されるのを待機する。

プッシュスイッチが1度押されて離されたら、タイマーをスタートする。
タイマーによって、1秒ごとに出力処理が呼び出される。
スイッチが離されてから1秒経過した 時点で 1 桁目の数値、
次の 1 秒が経過した時点で 2 桁目の数値、
さらに 1 秒が経過した時点で3 桁目 の数値、
4 秒経過した時点で 4 桁目の数値を 7 セグメント LED に表示する。
次の 1 秒が経過したら、7 セグメント LED を消灯し、初期状態に戻る。

タイマーが動作しているあいだは、
プッシュスイッチの入力を無視する。
これによって、  数値を表示している間は、スイッチを押しても何も起こらない。


\subsection{ハードウェアの配線と入出力}
ハードウェアの配線などは、
課題3から変化がないため、図表は省略する。
ただし、ディップスイッチは使用しない。

\subsection{プログラム実行の流れ}
メインループ以降の、プログラム実行の流れを表したC言語風の擬似コードをリスト\ref{k5}に示す。
メインループ以前の初期設定については、課題3からほどんど変更はない。
また、擬似コード中で使用している変数などについては、次の章で詳しく説明する。
\begin{lstlisting}[caption=課題5の擬似コード,label=k5]
  main () {
    // --- 初期設定 ---

    while(1) {                           // 無限ループ
      COUNT = #0;                        // COUNTを初期化
      PTAD  = #11111111b;                // LED消灯

      while (PTAD != #00000001b);        // スイッチONを待機
      while (PTAD != #00000000b);        // スイッチOFFを待機
      STISC = #00010111b;                // タイマースタート

      while (COUNT != #5);               // 出力が終了するのを待機
    }
  }

  ON_TIMER() {                         // タイマー割り込み
    SRTISC = #01010111b;               // タイマーの再設定
    COUNT++;

    switch COUNT {
      case 1 : PTBD   = ONE;        break;  // [1]を出力
      case 2 : PTBD   = ZERO;       break;  // [0]を出力
      case 3 : PTBD   = FOUR;       break;  // [4]を出力
      case 4 : PTBD   = FOUR;       break;  // [4]を出力
      case 5 : SRTISC = #00000101b;         // タイマー停止
               PTBD   = #11111111b; break;  // LED消灯
    }
  }

\end{lstlisting}


プログラムをスタートすると、main関数から実行される。(1)
プッシュスイッチが押されて離されたら、
SRTISCレジスタに適切な値を設定して、
タイマーを開始する。(8-10)
タイマーの詳しい設定方法については、
\ref{tim}章に記述する。

タイマーをスタートすると、約1秒ごとにON\verb+_+TIMER()関数が実行される。(16)
始めにタイマーの再設定を行う。(17)
これにより、タイマー割り込みを正しく実行したことをCPUに通知し、
次回もタイマー割り込みを実行できるようになる。

COUNTの値を1増やすと、この変数は、
タイマー割り込みを何回実行したかを示していることになる。(18)
この値によって、出力処理を分岐する。(20)
COUNTが1の時、7セグメントLEDに1を出力し、
2の時は0を、3の時は4を、4の時は4を出力する。(21-24)
これにより、``1044''の値を1秒ごとに出力できる。
タイマー割り込みが5回目に呼び出された時、すなわちCOUNTが5になった時は、
タイマーを停止してLEDを消灯する。(25-26)

タイマーを実行している時、メインループ内ではCOUNTの値が5になるのを待ち続ける。(12)
タイマーが停止したら、COUNTの値を初期化し、
再びプッシュスイッチが押されるのを待機する。(5-6)


\subsection{データ領域の使用方法}
このプログラムで使用したデータラベルの役割を表\ref{tab:45}に示す。

\begin{table}[htb]
  \centering
  \begin{tabular}{l | l }
    \hline
    ラベル & 意味・役割 \\
    \hline
    \hline
    \verb+COUNT: DS 1+ & タイマー割り込みを実行した回数を記録する変数。\\
    \verb+ZERO:  DS 1+& 7セグメントLEDの「0」の点滅状態を保存する変数。\\
    \verb+ONE:   DS 1+& 7セグメントLEDの「1」の点滅状態を保存する変数。\\
    \verb+TWO:   DS 1+& 7セグメントLEDの「2」の点滅状態を保存する変数。\\
    \verb+THREE: DS 1+ & 7セグメントLEDの「3」の点滅状態を保存する変数。\\
    \verb+FOUR:  DS 1+ & 7セグメントLEDの「4」の点滅状態を保存する変数。\\
    \verb+FIVE:  DS 1+ & 7セグメントLEDの「5」の点滅状態を保存する変数。\\
    \verb+SIX:   DS 1+ & 7セグメントLEDの「6」の点滅状態を保存する変数。\\
    \verb+SEVEN: DS 1+ & 7セグメントLEDの「7」の点滅状態を保存する変数。\\
    \hline
    \verb+waitC:+   & コンデンサの充電を待機するループ。\\
    \hdashline
    \verb+ON_TIMER:+   & タイマー割り込み時の処理。\\
    \verb+One:+   & 1桁目の数字出力。\\
    \verb+Two:+   & 2桁目の数字出力。\\
    \verb+Three:+   & 3桁目の数字出力。\\
    \verb+Four:+   & 4桁目の数字出力。\\
    \verb+TimerEnd:+   & タイマーを引き続きオンにするか、オフにするかの選択。\\
    \verb+TimerOff:+   & タイマーを停止してLEDを消灯する処理。\\
    \verb+TimerOn:+   & タイマーを引き続きオンにする処理。\\
    \verb+BackMainLoop:+   & RTI命令を実行する処理。\\
    \hdashline
    \verb+waitSw1On:+   & プッシュスイッチがオンになるのを待機するループ。\\
    \verb+waitSw1On:+   & プッシュスイッチがオフになるのを待機するループ。\\
    \verb+Sw1Off:+   & プッシュスイッチがオフになった時の処理。\\
    \verb+mainLoop:+   & メインループ。\\
    \hline
  \end{tabular}
  \caption{ラベルの意味と役割(課題5)}
  \label{tab:45}
\end{table}


\subsection{タイマー割り込みの利用方法}
\label{tim}
このプログラムでは1秒ごとに数字を出力するために、
リアルタイム割り込みタイマーを利用している。
mainloopではタイマーの開始を制御し、
リアルタイム割り込みによって、
1秒ごとに7セグメントLEDの表示を切り替える。

以下、リアルタイム割り込みの利用方法について説明する。

\paragraph{CLI命令による割り込み許可}
まずは、割り込み許可命令(CLI)を用いて割り込みを許可する。
この命令は、CodeWarriorで自動生成されているため、
これをそのまま使用する。

\paragraph{リアルタイム割り込み制御レジスタ(SRTISC)の設定}
リアルタイム割り込みを有効化するためには、
システムリアルタイム割込みステータス制御レジスタ (SRTISC)
に適切な値を書き込む必要がある。
SRTISCのビット構成を表\ref{tab:5}に示す。

\begin{table}[htb]
  \centering
  \begin{tabular}{r|c|c|c|c|c|c|}
    \multicolumn{1}{c}{bit}     &
    \multicolumn{1}{c}{7} &
    \multicolumn{1}{c}{6} &
    \multicolumn{1}{c}{5} &
    \multicolumn{1}{c}{4} &
    \multicolumn{1}{c}{3} &
    \multicolumn{1}{c}{2 1 0}  \\ \cline{2-7}
    リード:& RTIF & 0     & RTICLKS & RTIE & 0 & RTIS \\ \cline{2-3}\cline{6-6}
    ライト:&      & RTIACK&         &     &    &      \\ \cline{2-7}
  \end{tabular}
  \caption{システムリアルタイム割込みステータス制御レジスタ(SRTISC)}
  \label{tab:5}
\end{table}

約 1 秒ごとにリアルタイム割込みを生成する場合は、
RTICLKS=0 (クロックソースに内部の 1kHz オシ レータを使用する)、
RTIE=1(割り込み有効)、RTIS=111(割込み周期 1.024s)を設定する。
その他のビットには、0を設定する。
これを元にして、\verb+SRTISC = #00010111b+と設定すれば、
1秒ごとにリアルタイム割り込みを生成することができる。
この設定項目は、データ シート 5 章の表 5-10、表 5-11 に書かれている。

\paragraph{割り込みハンドラの記述}
割り込みが発生した時に実行したい処理を、
通常のmainLoopとは独立したルーチンとして記述する。
これを「割り込みハンドラ」とよぶ。
今回のプログラムにおける割り込みハンドラの役割は、
7セグメントLEDに、次の数字を出力することである。

割り込みハンドラには、先頭の命令に必ずラベルを付け、
命令のアドレスを参照できるようにする。
今回は、ON\verb+_+TIMERとつけておく。

割り込みハンドラの中では、
割り込みを正しく処理したことをCPUに伝えるために、
タイマの再設定を行う命令を記述する。
SRTISCのRTIACKに1を書き込むと、
タイマに関する割り込みフラグがリセットされる。
1秒後にもう一度割り込みが欲しい場合には、
他のビットの値も合わせて設定しておく。
タイマを停止したい場合には、
他のビットの値をすべて0にする。
つまり、タイマを続けたいとき、\verb+SRTISC = 01010111+と設定し、
タイマを停止したいとき、\verb+SRTISC = 01000000+と設定する。

また、割り込み処理は、必ずRTI命令に到達して終了する。
そして、割り込みハンドラの中には、
実行時間が割り込み間隔よりも十分に短い処理だけを書かなければならない。

具体的には、割り込みハンドラの中身は以下のようになる。

\begin{screen}
\begin{verbatim}
ON_TIMER:
            LDA #01010111b   ; タイマの再設定
            STA SRTISC

            ;; 割り込み処理

            RTI
\end{verbatim}
\end{screen}


\paragraph{割り込みベクタの設定}

最後に、割り込みベクタを設定して、
割り込みハンドラの位置をCPUに知らせる。
割込みベクタの名前や位置は、データシート 5 章、表 5-2 に記載されている。
以下の様な命令を、プログラムの下端に記述すると、
ラベルVrtiのアドレスに、割込みハンドラの先頭の命令に付けたラベルのアドレスが書き込まれる。

\begin{screen}
\begin{verbatim}
ORG  Vrti
DC.W ON_TIMER
\end{verbatim}
\end{screen}


この設定より、タイマ割り込みが発生した時、\verb+ON_TIMER+に処理が移動する。
ここまでの準備をすべて完了した状態でプログラムを実行すると、
1秒ごとに割り込み処理を実行することができる。



\section{課題6: ユーザーが指定したパターンの点灯}
\subsection{課題内容}
プッシュスイッチとディップスイッチを用いて数値の列を入力すると、
その数値列に対応した 7 セグメント LED の点灯パターンを実行するシステムを作成する。
動作の詳細を以下に示す。

\begin{itemize}
\item \textbf{初期状態}:電源投入後、7 セグメント LED を消灯し、入力状態に移行する。
\item \textbf{入力状態}:プッシュスイッチを押して離すと、
  7セグメントLEDに数値を表示し、また、その数値を記憶する。
  入力された数値が1$\sim$7 で、かつ、記憶した数値の数が 10 個に満たなければ、
  入力状態を継 続する。
  記憶した数値の数が 10 個に到達したか、
  入力された数値が0 であれば、出力状態に移行する。
\item \textbf{出力状態}:入力が完了した状態からさらに1回プッシュスイッチを押して離すと、出力を開始する。
  各 数値をそれぞれ表示内容の指示として解釈し、
  実験課題書の表 1 に指定されたパターンを 0.5 秒に 1 回のぺースで表示していく。
  また、数値と数値の間では、7セグメントLEDを0.5秒消灯する。
  最後の数値まで表示を完了したら、LEDを消灯し、入力状態に戻る。
\end{itemize}

\subsection{システムの振る舞い}
電源を投入した後と、
入力状態の振る舞いは、課題4のプログラムと同じである。
これは\ref{sis4}章に示してあるため、説明は省略する。

出力状態に移行した後、
さらにプッシュスイッチが押されて離されると、
0.5秒ごとにタイマー割り込みを発生するタイマーをスタートする。
タイマー割り込みが発生すると、
保存された最初の数値の、最初の点灯パターンを7セグメントLEDに表示する。
さらに割り込みが発生すると、次の点灯パターンをLEDに表示する。
完全な数字を表示した後に割り込みが発生すると、LEDを消灯する。
次に割り込みが発生すると、次に保存された数値の、最初の点灯パターンをLEDに表示する。
保存された全ての数値を表示し終わったら、タイマーを停止し、入力状態に戻る。
なお、タイマーが動作している間は、プッシュスイッチの入力を無視する。

\subsection{ハードウェアの配線と入出力}

ハードウェアの配線などは、
課題3から変化がないため、図表は省略する。


\subsection{プログラム実行の流れ}
メインループ以降の、プログラム実行の流れを表したC言語風の擬似コードをリスト\ref{k6}に示す。
メインループ以前の初期設定については、課題3からほどんど変更はない。
また、擬似コード中で使用している変数などについては、次の章で詳しく説明する。


\begin{lstlisting}[caption=課題6の擬似コード,label=k6]
  main() {
   // ---初期設定---

    while(1) {                           // 無限ループ
      while (PTAD != #00000001b);        // スイッチONを待機
      while (PTAD != #00000000b);        // スイッチOFFを待機

    //  入力状態の時
      if        (MODE == 0) {
        INDEX = (PTAD >> 1) & #00000111b;   // ディップスイッチの値を読み取る
        PTBD  = SEG[INDEX];                 // 7segLEDに出力
        HIST[COUNT] = INDEX;                // 「数値」を保存
        COUNT++;
        if (INDEX == 0) || (COUNT == 10) {  // 0が入力orデータが10個
          COUNT = 0;
          MODE  = 1;                      // 出力状態に変更
        }
   // 出力状態の時
      } else if (MODE == 1) {
        SRTISC = #00010110b;           // タイマーを開始
        while(OUTEND != 1);            // 出力の終了を待機
      }
    }
  }

  ON_TIMER() { // タイマー割り込み
    HXREGI = HX;          // HXレジスタの値を退避
    STISC  = #01010110b;  // タイマーの再設定

    swich HIST[COUNT] {   // 保存された数値を読み込む
      case 0 : STISC  = #01000000b; // 0を読み込んだ時  タイマー停止
               OUTEND = 1;          // 出力終了フラグを立てる
               PTBD   = #11111111b; // LED消灯
               goto main()       break; // メイン関数へ戻る。
      case 1 : PTBD = ONE[ILM]   break;
      case 2 : PTBD = TWO[ILM]   break;
      case 3 : PTBD = THREE[ILM] break;
      case 4 : PTBD = FOUR[ILM]  break;
      case 5 : PTBD = FIVE[ILM]  break;
      case 6 : PTBD = SIX[ILM]   break;
      case 7 : PTBD = SEVEN[ILM] break;
    }
    if (PTBD == #11111111b) { // LEDを消灯した時
      COUNT++;                // 次の数値へ
      ILM = 0;
    } else {
      ILM++;                  // 次の点灯パターンへ
    }
    if (COUNT == #10) {       // 10個目のデータを出力した時
      SRTISC = #01000000b;    // タイマー停止
      OUTEND = 1;             // 出力終了フラグ
      PTBD   = #11111111b;    // LED消灯
    }

    X = HXREGI; // HXレジスタの値を復元
  }
\end{lstlisting}

まず、これまでの課題と同様に、
変数の初期化などを行う。(2)
変数について詳しくは、次の\ref{data}章で説明する。
プッシュスイッチが押されて離されたら、
現在の入出力状態に応じて処理を分岐する。(5-9)
入力状態の時は、
ディップスイッチの値を読み取る処理を行う。(10-13)
この部分の処理については、課題4と同様であるため、
詳しい説明は省略する。
課題4と異なるのは、HIST[COUNT]には入力された数値を保存するということである。(12)
例えば、「245」の順番で数値が入力された場合は、HIST[0]に2が、
HIST[1]に4がHIST[2]に5が記録されていく。

出力状態の時は、SRTISCに適切な値を入力して、
タイマーを開始し、終了を待機する。(19-21)
タイマーの設定内容について詳しくは、\ref{tim2}章で詳しく説明する。
出力がすべて終了したら、OUTEND変数の値が1になるので、
これを検知したら再び入力状態に戻る。(21)

次に、タイマー割り込みの処理内容について説明する。
タイマーがセットされると、0.5秒ごとにON\verb+_+TIMERが実行される。(26)
タイマーの再設定などを行った後、
HISTに保存された数値を読み込み、
その数値によって処理を分岐する。(27-30)
値が0の時、データの終端に達したことを意味するので、
タイマーを停止し、OUTEND変数の値を1にして、LEDを消灯する。(31-34)
それ以外の時は、対応する数値をLEDに表示していく。(35-41)
「ONE[]...SEVEN[]」の各配列には、各数値を表示するまでの点灯パターンが記録されている。
従って、4を出力したい場合、FOUR[0]、FOUR[1]、FOUR[2]と順番に表示していくことによって、
点灯パターンに対応した出力を行うことができる。
出力の例を以下に示す。

\begin{screen}
\begin{verbatim}
   |        |_       |_|      |_|
->       ->       ->       ->   |   -> 消灯
  FOUR[0]  FOUR[1]  FOUR[2]  FOUR[3]  FOUR[4]
  1011111  0011111  0011101  0011001  1111111
\end{verbatim}
\end{screen}


配列の添字部分は、ILM変数で制御していて、
タイマー割り込みが実行されるごとにこの値を増加させ、
次々とパターンを出力していく。(46-47)
「ONE[]...SEVEN[]」の各配列の終端には「\#11111111b」が記録されていて、
数値を出力した後にはLEDを消灯できるようになっている。
LEDを消灯した後は、COUNTの値を1増やし、次の値を出力していく。(43-45)
次の値が0であった時や、
10個目のデータを出力した時、
すなわちCOUNTの値が10になった時は、タイマーを停止し、
OUTEND変数の値を1にして、LEDを消灯する。(49-52)

保存された数値の点灯パターンを表示する手順を、もう少し詳しく説明する。
ソースコード下部には、
「ONE[]...SEVEN[]」の各配列が以下のように定義されている。

\begin{screen}
\begin{verbatim}
ONE:     DC.B 11111101b, 11111001b, 11111111b
TWO:     DC.B 11111110b, 01111100b, 10111100b, 00101100b, 00100100b, 11111111b
THREE:   DC.B 01111110b, 01111100b, 00111100b, 00111000b, 00110000b, 11111111b
FOUR:    DC.B 01011111b, 00011111b, 00011101b, 00011001b, 11111111b
FIVE:    DC.B 01111110b, 01011110b, 00011110b, 00011010b, 00010010b, 11111111b
SIX:     DC.B 01011111b, 01001111b, 01000111b, 01000011b, 00000011b, 11111111b
SEVEN:   DC.B 01111110b, 01111100b, 01111000b, 11111111b
\end{verbatim}
\end{screen}


各配列のn列目は、n回目の点灯パターンを示している。
配列の終端には、\verb+#11111111b+が格納されていて、これにより7セグメントLEDを消灯できる。

次に、例として「1470」と入力した際の出力手順を示す。

\begin{screen}
\begin{verbatim}
HIST[0]=1  ONE[0]   -> ONE[1]   -> ONE[2](消灯)
HIST[1]=4  FOUR[0]  -> FOUR[1]  -> FOUR[2]  -> FOUR[3]  -> FOUR[4](消灯)
HIST[2]=7  SEVEN[0] -> SEVEN[1] -> SEVEN[2] -> SEVEN[3](消灯)
HIST[3]=0  タイマー停止
\end{verbatim}
\end{screen}


まず、HISTの最初の数値を読み込み、ONE[]の値を次々に7セグメントLEDに出力していく。
LEDを消灯したら、HISTの次の値を読み込み、
FOUR[]の値を出力していく。
これを繰り返し、HISTの値が0になったら、タイマーを停止する。
このようにして、点灯パターンの表示を実行している。

\subsection{データ領域の使用方法}
\label{data}
このプログラムで使用したデータラベルの役割を表\ref{tab:36}に示す。

\begin{table}[htbp]
  \centering
  \begin{tabular}{l | l }
    \hline
    ラベル & 意味・役割 \\
    \hline \hline
    \verb+MODE:   DS 1+ & 入出力状態を指定するための変数。(0…入力状態、1…出力状態)\\
    \verb+COUNT:  DS 1+ & HISTのアドレスを指定するための変数。\\
    \verb+INDEX:  DS 1+ & NUMBERのアドレスを指定するための変数。\\
    \verb+ILM:    DS 1+   & 点灯パターンのアドレスを指定するための変数。\\
    \verb+HIST:   DS 10+ & 入力した値を最大10個保存する配列。\\
    \verb+HXREGI: DS 1+& HXレジスタの値を退避するための変数。\\
    \verb+OUTEND: DS 1+& 出力が完了したことを示す変数。(1…出力完了)\\
    \hline
    \verb+waitC:+   & コンデンサの充電を待機するループ。\\
    \verb+waitSw1On:+   & プッシュスイッチがオンになるのを待機するループ。\\
    \verb+waitSw1On:+   & プッシュスイッチがオフになるのを待機するループ。\\
    \verb+input:+   & 入力状態の処理。 \\
    \verb+modeChangeOut:+   & 入力状態から出力状態に変更する処理。\\
    \verb+output:+   & 出力状態の処理。\\
    \verb+modeChangeInput:+ &  出力状態から入力状態に変更する処理。 \\
    \verb+mainLoop+ & メインループ。\\
    \hdashline
    \verb+ON_TIMER:+   & タイマー割り込み時の処理。\\
    \verb+One: - Seven:+   & ONE[]$\sim$SEVEN[]を読み込む処理。 \\
    \verb+Disp:+   & 7セグメントLEDに点灯パターンを出力する処理。\\
    \verb+NumEnd:+   & 点灯パターンが終端に達した時の処理。\\
    \verb+TimerEnd:+   & タイマーを引き続きオンにするか、オフにするかの選択。\\
    \verb+TimerOff:+   & タイマーを停止してLEDを消灯する処理。\\
    \verb+TimerOn:+   & タイマーを引き続きオンにする処理。\\
    \verb+BackMainLoop:+   & RTI命令を実行する処理。\\
    \hline
    \verb+NUMBER: DC.B+ & 7セグメントLEDの各値の点滅状態を保存する配列。\\
    \verb+ONE:    DC.B+ & 「1」の点灯パターンを保存する配列。(個数3) \\
    \verb+TWO:    DC.B+ & 「2」の点灯パターンを保存する配列。(個数6) \\
    \verb+THREE:  DC.B+ & 「3」の点灯パターンを保存する配列。(個数6) \\
    \verb+FOUR:   DC.B+ & 「4」の点灯パターンを保存する配列。(個数5) \\
    \verb+FIVE:   DC.B+ & 「5」の点灯パターンを保存する配列。(個数6) \\
    \verb+SIX:    DC.B+ & 「6」の点灯パターンを保存する配列。(個数6) \\
    \verb+SEVEN:  DC.B+ & 「7」の点灯パターンを保存する配列。(個数4) \\
    \hline
  \end{tabular}
  \caption{ラベルの意味と役割(課題6)}
  \label{tab:36}
\end{table}


\subsection{タイマー割り込みの利用方法}
\label{tim2}
このプログラムでは、
0.5秒ごとに点灯パターンを表示する役割を、
タイマー割り込みが担当している。
それ以外の、入力状態の処理や、
タイマーを開始する処理は、mainLoopが担当している。

タイマーを0.5秒ごとに動作させるためには、
システムリアルタイム割込みステータス制御レジスタ (SRTISC)の
RTISを110(512ms)と設定すれば良い。
従って、タイマーを開始する際のSRTISCの値は、
\verb+#00010110b+となる。


\end{document}